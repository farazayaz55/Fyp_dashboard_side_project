/* eslint-disable @typescript-eslint/no-explicit-any */
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional





import Head from "next/head";
import React, { useEffect, useState } from "react";
import Cookies from "js-cookie";
import { getDatabase, ref, onValue } from "firebase/database";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
} from "recharts";
import { useRouter } from "next/router";
import { debounce } from "lodash";



const firebaseConfig = {
  apiKey: "AIzaSyCi06RZhGYuCbAfIrqfvFfssMITICAeC1o",
  authDomain: "dummy-data-774b0.firebaseapp.com",
  databaseURL: "https://dummy-data-774b0-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "dummy-data-774b0",
  storageBucket: "dummy-data-774b0.appspot.com",
  messagingSenderId: "70173763691",
  appId: "1:70173763691:web:d2c173a7824ffd4de0e92e",
  measurementId: "G-YCYK6DT0BT"
};

// Initialize Firebase
 initializeApp(firebaseConfig);


const database = getDatabase();


const Dashboard: React.FC = () => {
  const router = useRouter();

  const [data,setData]=useState(Array.from({ length: 100 }, (_, index) => ({
    name: (index + 1).toString(),
    value: 0,
  })))


  const checkLogic=(updatedData:any) => {
    if(updatedData){
      for (let i=0;i<100;i++){
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if(updatedData[i])
        {
          continue
        }
        else{
          return false
        }
      }
      return true
    }
  }


  const trickleValues=(updatedValue:any,receivedValue:number ) => {
    
    for(let i=0;i<99;i++){
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
      updatedValue[i].value=updatedValue[i+1].value
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    updatedValue[99].value=receivedValue
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return updatedValue
  }
  
  const handleValueChange = (snapshot: { val: () => number; }) => {
    const received = snapshot.val();
    // setSensorValue(data);
   
    let updatedData = [...data];



    if (updatedData && checkLogic(updatedData) && updatedData[99] && updatedData[99].value!=received  ) {

      //push data
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      updatedData= trickleValues(updatedData,received)
      setData(updatedData);

    }
  }

  const sensorRef = ref(database, "Sensor/Reading1");
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call
  const debouncedHandleValueChange = debounce(handleValueChange, 1000); // Adjust the delay as needed (e.g., 1000 milliseconds = 1 second)

// eslint-disable-next-line @typescript-eslint/no-unsafe-argument
onValue(sensorRef, debouncedHandleValueChange);

  const checkUser =  () => {
    const user = Cookies.get("User");
    if (!user) {
      void router.replace("/");
    }
  };

  useEffect(() => {
     void checkUser()
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleSignOut = () => {
    Cookies.remove("User");
     void router.replace("/");
  };

  return (
    <>
      <Head>
        <title>Awais Dashboard</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]" id="DBPage">
      <div className="grid grid-cols-3 gap-4 justify-center">
        <div className="col-span-0.5"></div>
        <div className="col-span-2.5">
    <LineChart width={500} height={300} data={data}>
      <XAxis dataKey="name" tick={{ fill: "#fff" }} />
      <YAxis tick={{ fill: "#fff" }} />
      <CartesianGrid strokeDasharray="3 3" stroke="#fff" />
      <Tooltip
        contentStyle={{ color: "#000" }}
        labelStyle={{ color: "#000" }}
        itemStyle={{ color: "#000" }}
      />
      <Legend />
      <Line type="monotone" dataKey="value" stroke="#fff" />
    </LineChart>
    </div>
  </div>

        <button
          className="fixed top-4 right-4 px-4 py-2 rounded bg-red-500 text-white"
          onClick={handleSignOut}
        >
          Sign Out
        </button>
      </main>
    </>
  );
};

export default Dashboard;
